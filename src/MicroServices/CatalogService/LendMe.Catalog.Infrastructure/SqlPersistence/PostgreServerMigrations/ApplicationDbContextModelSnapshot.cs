// <auto-generated />
using System;
using System.Collections.Generic;
using LendMe.Catalog.Infrastructure.SqlPersistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LendMe.Catalog.Infrastructure.SqlPersistence.PostgreServerMigrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.HasIndex("ParentId");

                    b.HasIndex("ParentId1");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("DailyPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<decimal?>("DepositAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("MonthlyPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("WeeklyPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .HasFilter("is_deleted = false");

                    b.HasIndex("CreatedAt")
                        .IsDescending()
                        .HasFilter("is_deleted = false");

                    b.HasIndex("DailyPrice")
                        .HasFilter("is_deleted = false");

                    b.HasIndex("IsAvailable")
                        .HasFilter("is_deleted = false");

                    b.HasIndex("Status")
                        .HasFilter("is_deleted = false");

                    b.HasIndex("Title");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Title"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Title"), new[] { "gin_trgm_ops" });

                    b.ToTable("Items");
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.ItemDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("ItemDetails");
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.ItemImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.PrimitiveCollection<List<string>>("AiTags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ItemDetailsId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemDetailsId");

                    b.ToTable("ItemImage");
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.Rent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<int>("Points")
                        .HasColumnType("geography(POINT, 4326)")
                        .HasColumnName("location");

                    b.Property<int>("RadiusMeters")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1000);

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Point");

                    b.HasKey("Id");

                    b.HasIndex("City");

                    b.HasIndex("District");

                    b.HasIndex("Points");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Points"), "gist");

                    b.ToTable("Rent", (string)null);
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.RentItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RentId");

                    b.HasIndex("ItemId", "RentId")
                        .IsUnique();

                    b.ToTable("RentItems");
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.Category", b =>
                {
                    b.HasOne("LendMe.Catalog.Core.Entity.Category", null)
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LendMe.Catalog.Core.Entity.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.Item", b =>
                {
                    b.HasOne("LendMe.Catalog.Core.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.ItemDetails", b =>
                {
                    b.HasOne("LendMe.Catalog.Core.Entity.Item", null)
                        .WithOne("Details")
                        .HasForeignKey("LendMe.Catalog.Core.Entity.ItemDetails", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.ItemImage", b =>
                {
                    b.HasOne("LendMe.Catalog.Core.Entity.ItemDetails", "ItemDetails")
                        .WithMany("Images")
                        .HasForeignKey("ItemDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ItemDetails");
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.Rent", b =>
                {
                    b.OwnsOne("LendMe.Catalog.Core.Entity.RentalTerms", "Terms", b1 =>
                        {
                            b1.Property<Guid>("RentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CancellationPolicy")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("terms_cancellation_policy");

                            b1.Property<string>("IncludedAccessories")
                                .IsRequired()
                                .HasColumnType("jsonb")
                                .HasColumnName("terms_included_accessories");

                            b1.Property<string>("PickupInstructions")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("terms_pickup_instructions");

                            b1.Property<bool>("RequiresDeposit")
                                .HasColumnType("boolean")
                                .HasColumnName("terms_requires_deposit");

                            b1.Property<bool>("RequiresInsurance")
                                .HasColumnType("boolean")
                                .HasColumnName("terms_requires_insurance");

                            b1.Property<string>("RestrictedUses")
                                .IsRequired()
                                .HasColumnType("jsonb")
                                .HasColumnName("terms_restricted_uses");

                            b1.Property<string>("UsageGuidelines")
                                .IsRequired()
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("terms_usage_guidelines");

                            b1.HasKey("RentId");

                            b1.ToTable("Rent");

                            b1.WithOwner()
                                .HasForeignKey("RentId");
                        });

                    b.Navigation("Terms")
                        .IsRequired();
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.RentItems", b =>
                {
                    b.HasOne("LendMe.Catalog.Core.Entity.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LendMe.Catalog.Core.Entity.Rent", "Rent")
                        .WithMany()
                        .HasForeignKey("RentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.Category", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.Item", b =>
                {
                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.ItemDetails", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}

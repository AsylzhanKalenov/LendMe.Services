// <auto-generated />
using System;
using System.Collections.Generic;
using LendMe.Catalog.Infrastructure.SqlPersistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LendMe.Catalog.Infrastructure.SqlPersistence.PostgreServerMigrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251018170927_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "pg_trgm");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<string>("IconUrl")
                        .HasColumnType("text")
                        .HasColumnName("icon_url");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_id");

                    b.HasKey("Id")
                        .HasName("pk_categories");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_categories_name");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_categories_parent_id");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("DailyPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("daily_price");

                    b.Property<decimal?>("DepositAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("deposit_amount");

                    b.Property<decimal?>("HourlyPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("hourly_price");

                    b.Property<string>("IdentifyNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identify_number");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_available");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<decimal?>("MonthlyPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("monthly_price");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<int>("PriceType")
                        .HasColumnType("integer")
                        .HasColumnName("price_type");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<decimal?>("WeeklyPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("weekly_price");

                    b.HasKey("Id")
                        .HasName("pk_items");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_items_category_id")
                        .HasFilter("is_deleted = false");

                    b.HasIndex("CreatedAt")
                        .IsDescending()
                        .HasDatabaseName("ix_items_created_at")
                        .HasFilter("is_deleted = false");

                    b.HasIndex("DailyPrice")
                        .HasDatabaseName("ix_items_daily_price")
                        .HasFilter("is_deleted = false");

                    b.HasIndex("IsAvailable")
                        .HasDatabaseName("ix_items_is_available")
                        .HasFilter("is_deleted = false");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_items_status")
                        .HasFilter("is_deleted = false");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_items_title");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Title"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Title"), new[] { "gin_trgm_ops" });

                    b.ToTable("items", (string)null);
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.ItemDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id");

                    b.PrimitiveCollection<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.HasKey("Id")
                        .HasName("pk_item_details");

                    b.HasIndex("ItemId")
                        .IsUnique()
                        .HasDatabaseName("ix_item_details_item_id");

                    b.ToTable("item_details", (string)null);
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.ItemImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.PrimitiveCollection<List<string>>("AiTags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("ai_tags");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("is_primary");

                    b.Property<Guid>("ItemDetailsId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_details_id");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("ThumbnailUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("thumbnail_url");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_item_image");

                    b.HasIndex("ItemDetailsId")
                        .HasDatabaseName("ix_item_image_item_details_id");

                    b.ToTable("item_image", (string)null);
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.Rent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("address");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("category_id");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("district");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.Property<double>("MaxPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("max_price");

                    b.Property<double>("MinPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("min_price");

                    b.Property<Point>("Points")
                        .IsRequired()
                        .HasColumnType("geography(POINT, 4326)")
                        .HasColumnName("location");

                    b.Property<int>("RadiusMeters")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1000)
                        .HasColumnName("radius_meters");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_rents");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("ix_rents_category_id");

                    b.HasIndex("City")
                        .HasDatabaseName("ix_rents_city");

                    b.HasIndex("District")
                        .HasDatabaseName("ix_rents_district");

                    b.HasIndex("Title")
                        .HasDatabaseName("ix_rents_title");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Title"), "gin");
                    NpgsqlIndexBuilderExtensions.HasOperators(b.HasIndex("Title"), new[] { "gin_trgm_ops" });

                    b.ToTable("rents", (string)null);
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.RentItems", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id");

                    b.Property<Guid>("RentId")
                        .HasColumnType("uuid")
                        .HasColumnName("rent_id");

                    b.HasKey("Id")
                        .HasName("pk_rent_items");

                    b.HasIndex("RentId")
                        .HasDatabaseName("ix_rent_items_rent_id");

                    b.HasIndex("ItemId", "RentId")
                        .IsUnique()
                        .HasDatabaseName("ix_rent_items_item_id_rent_id");

                    b.ToTable("rent_items", (string)null);
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.Category", b =>
                {
                    b.HasOne("LendMe.Catalog.Core.Entity.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_categories_categories_parent_id");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.Item", b =>
                {
                    b.HasOne("LendMe.Catalog.Core.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_items_categories_category_id");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.ItemDetails", b =>
                {
                    b.HasOne("LendMe.Catalog.Core.Entity.Item", null)
                        .WithOne("Details")
                        .HasForeignKey("LendMe.Catalog.Core.Entity.ItemDetails", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_details_items_item_id");
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.ItemImage", b =>
                {
                    b.HasOne("LendMe.Catalog.Core.Entity.ItemDetails", "ItemDetails")
                        .WithMany("Images")
                        .HasForeignKey("ItemDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_item_image_item_details_item_details_id");

                    b.Navigation("ItemDetails");
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.Rent", b =>
                {
                    b.HasOne("LendMe.Catalog.Core.Entity.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_rents_categories_category_id");

                    b.OwnsOne("LendMe.Catalog.Core.Entity.RentalTerms", "Terms", b1 =>
                        {
                            b1.Property<Guid>("RentId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("CancellationPolicy")
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("terms_cancellation_policy");

                            b1.Property<string>("IncludedAccessories")
                                .IsRequired()
                                .HasColumnType("jsonb")
                                .HasColumnName("terms_included_accessories");

                            b1.Property<string>("PickupInstructions")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)")
                                .HasColumnName("terms_pickup_instructions");

                            b1.Property<bool>("RequiresDeposit")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("boolean")
                                .HasDefaultValue(false)
                                .HasColumnName("terms_requires_deposit");

                            b1.Property<bool>("RequiresInsurance")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("boolean")
                                .HasDefaultValue(false)
                                .HasColumnName("terms_requires_insurance");

                            b1.Property<string>("RestrictedUses")
                                .IsRequired()
                                .HasColumnType("jsonb")
                                .HasColumnName("terms_restricted_uses");

                            b1.Property<string>("UsageGuidelines")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("terms_usage_guidelines");

                            b1.HasKey("RentId");

                            b1.ToTable("rents");

                            b1.WithOwner()
                                .HasForeignKey("RentId")
                                .HasConstraintName("fk_rents_rents_id");
                        });

                    b.Navigation("Category");

                    b.Navigation("Terms")
                        .IsRequired();
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.RentItems", b =>
                {
                    b.HasOne("LendMe.Catalog.Core.Entity.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rent_items_items_item_id");

                    b.HasOne("LendMe.Catalog.Core.Entity.Rent", "Rent")
                        .WithMany()
                        .HasForeignKey("RentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rent_items_rents_rent_id");

                    b.Navigation("Item");

                    b.Navigation("Rent");
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.Category", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.Item", b =>
                {
                    b.Navigation("Details")
                        .IsRequired();
                });

            modelBuilder.Entity("LendMe.Catalog.Core.Entity.ItemDetails", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}

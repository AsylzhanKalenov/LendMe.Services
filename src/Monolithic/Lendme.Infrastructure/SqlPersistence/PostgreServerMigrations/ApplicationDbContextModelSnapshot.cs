// <auto-generated />
using System;
using System.Collections.Generic;
using Lendme.Infrastructure.SqlPersistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lendme.Infrastructure.SqlPersistence.PostgreServerMigrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lendme.Core.Entities.Booking.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BookingNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("text");

                    b.Property<int?>("CancellationType")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ConfirmedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("PickedUpAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RenterId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("ReturnedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Bookings", (string)null);
                });

            modelBuilder.Entity("Lendme.Core.Entities.Booking.BookingPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExternalPaymentId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("FailedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FailureReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Method")
                        .HasColumnType("integer");

                    b.Property<string>("PaymentProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Purpose")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.ToTable("BookingPayments");
                });

            modelBuilder.Entity("Lendme.Core.Entities.Booking.BookingStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FromStatus")
                        .HasColumnType("integer");

                    b.Property<Dictionary<string, string>>("Metadata")
                        .IsRequired()
                        .HasColumnType("hstore");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ToStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BookingStatusHistories");
                });

            modelBuilder.Entity("Lendme.Core.Entities.Booking.ItemHandover", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ActualDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("BookingId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookingId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Photos")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("photos");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("BookingId1");

                    b.HasIndex("Type", "Status");

                    b.ToTable("ItemHandovers", (string)null);
                });

            modelBuilder.Entity("Lendme.Core.Entities.ProfileSQLEntities.UserAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apartment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DeliveryInstructions")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double?>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("Lendme.Core.Entities.ProfileSQLEntities.UserPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("General")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("general_preferences");

                    b.Property<string>("Notifications")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("notification_preferences");

                    b.Property<string>("OwnerSettings")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("owner_preferences");

                    b.Property<string>("Privacy")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("privacy_preferences");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("RenterSettings")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("renter_preferences");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique()
                        .HasDatabaseName("IX_UserPreferences_UserId");

                    b.ToTable("UserPreferences", (string)null);
                });

            modelBuilder.Entity("Lendme.Core.Entities.ProfileSQLEntities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CoverPhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("IdentityVerifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsIdentityVerified")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastActiveAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Dictionary<string, object>>("Metadata")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Preferences")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("VerificationLevel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Lendme.Core.Entities.ProfileSQLEntities.UserStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AcceptanceRate")
                        .HasColumnType("double precision");

                    b.Property<int>("ActiveListings")
                        .HasColumnType("integer");

                    b.Property<double>("AverageRatingAsOwner")
                        .HasColumnType("double precision");

                    b.Property<double>("AverageRatingAsRenter")
                        .HasColumnType("double precision");

                    b.Property<TimeSpan>("AverageResponseTime")
                        .HasColumnType("interval");

                    b.Property<int>("CancelledRentalsAsOwner")
                        .HasColumnType("integer");

                    b.Property<int>("CancelledRentalsAsRenter")
                        .HasColumnType("integer");

                    b.Property<int>("CompletedRentalsAsOwner")
                        .HasColumnType("integer");

                    b.Property<int>("CompletedRentalsAsRenter")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastCalculatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("MemberSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<int>("ProfileViews")
                        .HasColumnType("integer");

                    b.Property<double>("ResponseRate")
                        .HasColumnType("double precision");

                    b.Property<int>("ReviewCountAsOwner")
                        .HasColumnType("integer");

                    b.Property<int>("ReviewCountAsRenter")
                        .HasColumnType("integer");

                    b.Property<decimal>("ThisMonthEarnings")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ThisMonthSpent")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ThisYearEarnings")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalEarnings")
                        .HasColumnType("numeric");

                    b.Property<int>("TotalListings")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalSpent")
                        .HasColumnType("numeric");

                    b.Property<int>("TrustScore")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId")
                        .IsUnique();

                    b.ToTable("UserStatistics");
                });

            modelBuilder.Entity("Lendme.Core.Entities.ProfileSQLEntities.VerificationDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BackImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Dictionary<string, object>>("ExtractedData")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("FrontImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProcessedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<string>("RejectionReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SelfieWithDocUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("VerificationDocuments");
                });

            modelBuilder.Entity("Lendme.Core.Entities.Booking.Booking", b =>
                {
                    b.OwnsOne("Lendme.Core.Entities.Booking.BookingFinancials", "Financials", b1 =>
                        {
                            b1.Property<Guid>("BookingId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Currency");

                            b1.Property<decimal>("DailyRate")
                                .HasColumnType("numeric")
                                .HasColumnName("DailyRate");

                            b1.Property<decimal>("DamageCompensation")
                                .HasColumnType("numeric")
                                .HasColumnName("DamageCompensation");

                            b1.Property<decimal>("DepositAmount")
                                .HasColumnType("numeric")
                                .HasColumnName("DepositAmount");

                            b1.Property<decimal>("DiscountAmount")
                                .HasColumnType("numeric")
                                .HasColumnName("DiscountAmount");

                            b1.Property<string>("DiscountCode")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<decimal>("DiscountPercentage")
                                .HasColumnType("numeric")
                                .HasColumnName("DiscountPercentage");

                            b1.Property<decimal>("ItemPrice")
                                .HasColumnType("numeric")
                                .HasColumnName("item_price");

                            b1.Property<decimal>("PenaltyAmount")
                                .HasColumnType("numeric")
                                .HasColumnName("PenaltyAmount");

                            b1.Property<decimal>("RefundAmount")
                                .HasColumnType("numeric")
                                .HasColumnName("RefundAmount");

                            b1.Property<int>("RentalDays")
                                .HasColumnType("integer")
                                .HasColumnName("rental_days");

                            b1.Property<decimal>("SubTotal")
                                .HasColumnType("numeric")
                                .HasColumnName("SubTotal");

                            b1.Property<decimal>("TotalAmount")
                                .HasColumnType("numeric")
                                .HasColumnName("TotalAmount");

                            b1.HasKey("BookingId");

                            b1.ToTable("BookingFinancials");

                            b1.WithOwner()
                                .HasForeignKey("BookingId");
                        });

                    b.Navigation("Financials")
                        .IsRequired();
                });

            modelBuilder.Entity("Lendme.Core.Entities.Booking.BookingPayment", b =>
                {
                    b.HasOne("Lendme.Core.Entities.Booking.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("Lendme.Core.Entities.Booking.ItemHandover", b =>
                {
                    b.HasOne("Lendme.Core.Entities.Booking.Booking", null)
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lendme.Core.Entities.Booking.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Lendme.Core.Entities.Booking.HandoverLocation", "Location", b1 =>
                        {
                            b1.Property<Guid>("ItemHandoverId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("location_address");

                            b1.Property<string>("Coordinates")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("location_coordinates");

                            b1.Property<string>("Instructions")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("location_instructions");

                            b1.Property<string>("Latitude")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("location_latitude");

                            b1.Property<string>("Longitude")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("location_longitude");

                            b1.Property<string>("MeetingPoint")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("location_meeting_point");

                            b1.Property<int>("Method")
                                .HasColumnType("integer")
                                .HasColumnName("location_method");

                            b1.HasKey("ItemHandoverId");

                            b1.ToTable("ItemHandovers");

                            b1.WithOwner()
                                .HasForeignKey("ItemHandoverId");
                        });

                    b.OwnsOne("Lendme.Core.Entities.Booking.HandoverVerification", "Verification", b1 =>
                        {
                            b1.Property<Guid>("ItemHandoverId")
                                .HasColumnType("uuid");

                            b1.Property<string>("DisputeReason")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("verify_dispute_reason");

                            b1.Property<bool>("IsDisputed")
                                .HasColumnType("boolean")
                                .HasColumnName("verify_is_disputed");

                            b1.Property<bool>("IsOwnerPresent")
                                .HasColumnType("boolean")
                                .HasColumnName("verify_owner_present");

                            b1.Property<bool>("IsRenterPresent")
                                .HasColumnType("boolean")
                                .HasColumnName("verify_renter_present");

                            b1.Property<string>("OwnerSignature")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("verify_owner_signature");

                            b1.Property<string>("RenterSignature")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("verify_renter_signature");

                            b1.Property<DateTime?>("SignedAt")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("verify_signed_at");

                            b1.Property<string>("VerificationCode")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("verify_code");

                            b1.HasKey("ItemHandoverId");

                            b1.ToTable("ItemHandovers");

                            b1.WithOwner()
                                .HasForeignKey("ItemHandoverId");
                        });

                    b.OwnsOne("Lendme.Core.Entities.Booking.ItemCondition", "Condition", b1 =>
                        {
                            b1.Property<Guid>("ItemHandoverId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Damages")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("condition_damages");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("condition_description");

                            b1.Property<int>("Grade")
                                .HasColumnType("integer")
                                .HasColumnName("condition_grade");

                            b1.Property<bool>("HasAllAccessories")
                                .HasColumnType("boolean")
                                .HasColumnName("condition_has_accessories");

                            b1.Property<bool>("IsClean")
                                .HasColumnType("boolean")
                                .HasColumnName("condition_is_clean");

                            b1.Property<bool>("IsFunctional")
                                .HasColumnType("boolean")
                                .HasColumnName("condition_is_functional");

                            b1.Property<string>("MissingAccessories")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("condition_missing_accessories");

                            b1.HasKey("ItemHandoverId");

                            b1.ToTable("ItemHandovers");

                            b1.WithOwner()
                                .HasForeignKey("ItemHandoverId");
                        });

                    b.Navigation("Booking");

                    b.Navigation("Condition")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("Verification")
                        .IsRequired();
                });

            modelBuilder.Entity("Lendme.Core.Entities.ProfileSQLEntities.UserAddress", b =>
                {
                    b.HasOne("Lendme.Core.Entities.ProfileSQLEntities.UserProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Lendme.Core.Entities.ProfileSQLEntities.UserPreferences", b =>
                {
                    b.HasOne("Lendme.Core.Entities.ProfileSQLEntities.UserProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Lendme.Core.Entities.ProfileSQLEntities.UserStatistics", b =>
                {
                    b.HasOne("Lendme.Core.Entities.ProfileSQLEntities.UserProfile", "Profile")
                        .WithOne("Statistics")
                        .HasForeignKey("Lendme.Core.Entities.ProfileSQLEntities.UserStatistics", "ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Lendme.Core.Entities.ProfileSQLEntities.VerificationDocument", b =>
                {
                    b.HasOne("Lendme.Core.Entities.ProfileSQLEntities.UserProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Lendme.Core.Entities.ProfileSQLEntities.UserProfile", b =>
                {
                    b.Navigation("Statistics")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

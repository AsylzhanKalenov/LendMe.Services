version: '3.8'

services:
  
  # Cервисы
  lendme-service:
    build:
      context: ./src/UserService
      dockerfile: Dockerfile.dev
      target: development
    ports:
      - "5001:8080"
      - "5011:8081"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__PostgreSQL=Host=postgres;Port=5432;Database=users_db;Username=dev_user;Password=dev_password
      - ConnectionStrings__MongoDB=mongodb://mongo:27017/orders_db
      - ConnectionStrings__Redis=redis:6379
      - Kafka__BootstrapServers=kafka:9092
      - ASPNETCORE_HTTP_PORTS=8080
      - ASPNETCORE_HTTPS_PORTS=8081
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      kafka:
        condition: service_started
      mongo:
        condition: service_healthy
    volumes:
      - ./src/UserService:/app
      - /app/bin
      - /app/obj
    networks:
      - microservices-network

  # Базы данных
  postgres:
    image: postgres:15-alpine
    container_name: dev_postgres
    environment:
      POSTGRES_USER: dev_user
      POSTGRES_PASSWORD: dev_password
      POSTGRES_DB: main_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev_user -d main_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  redis:
    image: redis:7-alpine
    container_name: dev_redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - microservices-network

  mongo:
    image: mongo:7
    container_name: dev_mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin_password
      MONGO_INITDB_DATABASE: orders_db
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./database/mongo-init:/docker-entrypoint-initdb.d
    networks:
      - microservices-network

  # Kafka + Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: dev_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: dev_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - microservices-network

  # Инструменты разработки
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: dev_kafka_ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - microservices-network

  mongo-express:
    image: mongo-express:latest
    container_name: dev_mongo_express
    depends_on:
      - mongo
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin_password
      ME_CONFIG_MONGODB_SERVER: mongo
    networks:
      - microservices-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: dev_redis_commander
    depends_on:
      - redis
    ports:
      - "8082:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    networks:
      - microservices-network

  # Мониторинг (опционально)
  seq:
    image: datalust/seq:latest
    container_name: dev_seq
    ports:
      - "5341:80"
    environment:
      ACCEPT_EULA: Y
    volumes:
      - seq_data:/data
    networks:
      - microservices-network

volumes:
  postgres_data:
  redis_data:
  mongo_data:
  kafka_data:
  seq_data:

networks:
  microservices-network:
    driver: bridge